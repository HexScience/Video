package com.video.newqu.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_VIDEO_PLAYER_LIST".
*/
public class UserVideoPlayerListDao extends AbstractDao<UserVideoPlayerList, Long> {

    public static final String TABLENAME = "USER_VIDEO_PLAYER_LIST";

    /**
     * Properties of entity UserVideoPlayerList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property UserID = new Property(1, String.class, "userID", false, "USER_ID");
        public final static Property EmilID = new Property(2, String.class, "emilID", false, "EMIL_ID");
        public final static Property AddTime = new Property(3, long.class, "addTime", false, "ADD_TIME");
        public final static Property VideoID = new Property(4, String.class, "videoID", false, "VIDEO_ID");
        public final static Property VideoTag = new Property(5, String.class, "videoTag", false, "VIDEO_TAG");
        public final static Property State = new Property(6, int.class, "state", false, "STATE");
    }


    public UserVideoPlayerListDao(DaoConfig config) {
        super(config);
    }
    
    public UserVideoPlayerListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_VIDEO_PLAYER_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"USER_ID\" TEXT," + // 1: userID
                "\"EMIL_ID\" TEXT," + // 2: emilID
                "\"ADD_TIME\" INTEGER NOT NULL ," + // 3: addTime
                "\"VIDEO_ID\" TEXT," + // 4: videoID
                "\"VIDEO_TAG\" TEXT," + // 5: videoTag
                "\"STATE\" INTEGER NOT NULL );"); // 6: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_VIDEO_PLAYER_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserVideoPlayerList entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }
 
        String emilID = entity.getEmilID();
        if (emilID != null) {
            stmt.bindString(3, emilID);
        }
        stmt.bindLong(4, entity.getAddTime());
 
        String videoID = entity.getVideoID();
        if (videoID != null) {
            stmt.bindString(5, videoID);
        }
 
        String videoTag = entity.getVideoTag();
        if (videoTag != null) {
            stmt.bindString(6, videoTag);
        }
        stmt.bindLong(7, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserVideoPlayerList entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }
 
        String emilID = entity.getEmilID();
        if (emilID != null) {
            stmt.bindString(3, emilID);
        }
        stmt.bindLong(4, entity.getAddTime());
 
        String videoID = entity.getVideoID();
        if (videoID != null) {
            stmt.bindString(5, videoID);
        }
 
        String videoTag = entity.getVideoTag();
        if (videoTag != null) {
            stmt.bindString(6, videoTag);
        }
        stmt.bindLong(7, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserVideoPlayerList readEntity(Cursor cursor, int offset) {
        UserVideoPlayerList entity = new UserVideoPlayerList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emilID
            cursor.getLong(offset + 3), // addTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoTag
            cursor.getInt(offset + 6) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserVideoPlayerList entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmilID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddTime(cursor.getLong(offset + 3));
        entity.setVideoID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoTag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserVideoPlayerList entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserVideoPlayerList entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserVideoPlayerList entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
