package com.video.newqu.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STICKER_DATA_BEAN".
*/
public class StickerDataBeanDao extends AbstractDao<StickerDataBean, Long> {

    public static final String TABLENAME = "STICKER_DATA_BEAN";

    /**
     * Properties of entity StickerDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Src = new Property(3, String.class, "src", false, "SRC");
        public final static Property Desp = new Property(4, String.class, "desp", false, "DESP");
        public final static Property Type_id = new Property(5, String.class, "type_id", false, "TYPE_ID");
        public final static Property Sort = new Property(6, String.class, "sort", false, "SORT");
        public final static Property Add_time = new Property(7, String.class, "add_time", false, "ADD_TIME");
        public final static Property Add_date = new Property(8, String.class, "add_date", false, "ADD_DATE");
        public final static Property Down_num = new Property(9, String.class, "down_num", false, "DOWN_NUM");
        public final static Property IsSelector = new Property(10, boolean.class, "isSelector", false, "IS_SELECTOR");
        public final static Property IsDownloading = new Property(11, boolean.class, "isDownloading", false, "IS_DOWNLOADING");
        public final static Property ItemType = new Property(12, int.class, "itemType", false, "ITEM_TYPE");
        public final static Property UpdataTime = new Property(13, long.class, "updataTime", false, "UPDATA_TIME");
    }


    public StickerDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StickerDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STICKER_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"ID\" TEXT," + // 1: id
                "\"TITLE\" TEXT," + // 2: title
                "\"SRC\" TEXT," + // 3: src
                "\"DESP\" TEXT," + // 4: desp
                "\"TYPE_ID\" TEXT," + // 5: type_id
                "\"SORT\" TEXT," + // 6: sort
                "\"ADD_TIME\" TEXT," + // 7: add_time
                "\"ADD_DATE\" TEXT," + // 8: add_date
                "\"DOWN_NUM\" TEXT," + // 9: down_num
                "\"IS_SELECTOR\" INTEGER NOT NULL ," + // 10: isSelector
                "\"IS_DOWNLOADING\" INTEGER NOT NULL ," + // 11: isDownloading
                "\"ITEM_TYPE\" INTEGER NOT NULL ," + // 12: itemType
                "\"UPDATA_TIME\" INTEGER NOT NULL );"); // 13: updataTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STICKER_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StickerDataBean entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(4, src);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(5, desp);
        }
 
        String type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindString(6, type_id);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(7, sort);
        }
 
        String add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindString(8, add_time);
        }
 
        String add_date = entity.getAdd_date();
        if (add_date != null) {
            stmt.bindString(9, add_date);
        }
 
        String down_num = entity.getDown_num();
        if (down_num != null) {
            stmt.bindString(10, down_num);
        }
        stmt.bindLong(11, entity.getIsSelector() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsDownloading() ? 1L: 0L);
        stmt.bindLong(13, entity.getItemType());
        stmt.bindLong(14, entity.getUpdataTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StickerDataBean entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(4, src);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(5, desp);
        }
 
        String type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindString(6, type_id);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(7, sort);
        }
 
        String add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindString(8, add_time);
        }
 
        String add_date = entity.getAdd_date();
        if (add_date != null) {
            stmt.bindString(9, add_date);
        }
 
        String down_num = entity.getDown_num();
        if (down_num != null) {
            stmt.bindString(10, down_num);
        }
        stmt.bindLong(11, entity.getIsSelector() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsDownloading() ? 1L: 0L);
        stmt.bindLong(13, entity.getItemType());
        stmt.bindLong(14, entity.getUpdataTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StickerDataBean readEntity(Cursor cursor, int offset) {
        StickerDataBean entity = new StickerDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // src
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sort
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // add_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // add_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // down_num
            cursor.getShort(offset + 10) != 0, // isSelector
            cursor.getShort(offset + 11) != 0, // isDownloading
            cursor.getInt(offset + 12), // itemType
            cursor.getLong(offset + 13) // updataTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StickerDataBean entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSrc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSort(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdd_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdd_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDown_num(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsSelector(cursor.getShort(offset + 10) != 0);
        entity.setIsDownloading(cursor.getShort(offset + 11) != 0);
        entity.setItemType(cursor.getInt(offset + 12));
        entity.setUpdataTime(cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StickerDataBean entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StickerDataBean entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StickerDataBean entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
